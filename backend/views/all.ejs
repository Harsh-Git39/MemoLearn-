<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>All Saved Queries - MemoLearn</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
      background: #f5f7fa;
      min-height: 100vh;
    }

    /* Header */
    .header {
      background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
      color: white;
      padding: 30px 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .header-content {
      max-width: 1200px;
      margin: 0 auto;
    }

    .header h1 {
      font-size: 32px;
      margin-bottom: 10px;
    }

    .header p {
      font-size: 16px;
      opacity: 0.9;
    }

    /* Controls */
    .controls {
      max-width: 1200px;
      margin: 20px auto;
      padding: 0 20px;
      display: flex;
      gap: 15px;
      align-items: center;
      flex-wrap: wrap;
    }

    .search-box {
      flex: 1;
      min-width: 300px;
      position: relative;
    }

    .search-box input {
      width: 100%;
      padding: 12px 45px 12px 15px;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      font-size: 15px;
      transition: all 0.2s;
    }

    .search-box input:focus {
      outline: none;
      border-color: #4CAF50;
      box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
    }

    .search-icon {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      font-size: 18px;
      opacity: 0.5;
    }

    .stats-badge {
      background: white;
      padding: 12px 20px;
      border-radius: 8px;
      font-weight: 600;
      color: #4CAF50;
      box-shadow: 0 2px 4px rgba(0,0,0,0.08);
    }

    /* Container */
    .container {
      max-width: 1200px;
      margin: 0 auto 40px;
      padding: 0 20px;
    }

    /* Query Grid */
    .query-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(500px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .query-card {
      background: white;
      border-radius: 12px;
      padding: 24px;
      border-left: 6px solid #4CAF50;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
      transition: all 0.3s;
    }

    .query-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 20px rgba(0,0,0,0.12);
    }

    .query-header {
      display: flex;
      align-items: start;
      gap: 12px;
      margin-bottom: 15px;
    }

    .query-icon {
      font-size: 24px;
      flex-shrink: 0;
    }

    .query-title {
      flex: 1;
      font-size: 16px;
      font-weight: 600;
      color: #2c3e50;
      line-height: 1.4;
    }

    .query-meta {
      display: flex;
      gap: 15px;
      margin-bottom: 15px;
      font-size: 12px;
      color: #999;
    }

    .meta-item {
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .answer-content {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 15px;
      font-size: 14px;
      line-height: 1.6;
      color: #495057;
      max-height: 150px;
      overflow-y: auto;
    }

    .answer-content::-webkit-scrollbar {
      width: 6px;
    }

    .answer-content::-webkit-scrollbar-track {
      background: #e9ecef;
      border-radius: 3px;
    }

    .answer-content::-webkit-scrollbar-thumb {
      background: #cbd5e0;
      border-radius: 3px;
    }

    .card-actions {
      display: flex;
      gap: 10px;
    }

    .action-btn {
      flex: 1;
      padding: 10px 15px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 13px;
      font-weight: 600;
      transition: all 0.2s;
    }

    .copy-btn {
      background: #e3f2fd;
      color: #1976D2;
    }

    .copy-btn:hover {
      background: #2196F3;
      color: white;
    }

    .delete-btn {
      background: #ffebee;
      color: #c62828;
    }

    .delete-btn:hover {
      background: #f44336;
      color: white;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 80px 20px;
      color: #999;
    }

    .empty-state .icon {
      font-size: 100px;
      margin-bottom: 20px;
      opacity: 0.3;
    }

    .empty-state h2 {
      font-size: 28px;
      margin-bottom: 15px;
      color: #666;
    }

    .empty-state p {
      font-size: 16px;
      line-height: 1.6;
      max-width: 500px;
      margin: 0 auto;
    }

    /* No Results */
    .no-results {
      text-align: center;
      padding: 60px 20px;
      color: #999;
    }

    /* Footer */
    .footer {
      text-align: center;
      padding: 20px;
      color: #999;
      font-size: 13px;
      border-top: 1px solid #e0e0e0;
      margin-top: 40px;
    }

    /* Loading */
    .loading {
      text-align: center;
      padding: 60px 20px;
    }

    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #4CAF50;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Responsive */
    @media (max-width: 768px) {
      .query-grid {
        grid-template-columns: 1fr;
      }

      .header h1 {
        font-size: 24px;
      }

      .controls {
        flex-direction: column;
        align-items: stretch;
      }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <div class="header">
    <div class="header-content">
      <h1>üìö MemoLearn - All Saved Queries</h1>
      <p>Manage and search through your pinned answers</p>
    </div>
  </div>

  <!-- Controls -->
  <div class="controls">
    <div class="search-box">
      <input 
        type="text" 
        id="searchInput" 
        placeholder="Search your saved queries..."
        autocomplete="off"
      >
      <span class="search-icon">üîç</span>
    </div>
    <div class="stats-badge" id="statsBar">
      Loading...
    </div>
  </div>

  <!-- Main Container -->
  <div class="container">
    <!-- Loading State -->
    <div class="loading" id="loadingState">
      <div class="spinner"></div>
      <p>Loading your saved queries...</p>
    </div>

    <!-- Empty State -->
    <div class="empty-state" id="emptyState" style="display: none;">
      <div class="icon">üì≠</div>
      <h2>No Saved Queries Yet</h2>
      <p>Start saving answers by searching on Google or Bing, selecting text, and right-clicking to pin it with MemoLearn!</p>
    </div>

    <!-- No Search Results -->
    <div class="no-results" id="noResults" style="display: none;">
      <p>üîç No queries match your search</p>
    </div>

    <!-- Query Grid -->
    <div class="query-grid" id="queryGrid" style="display: none;">
      <!-- Queries will be inserted here -->
    </div>
  </div>

  <!-- Footer -->
  <div class="footer">
    <p>MemoLearn Extension | Server: <strong>localhost:3000</strong></p>
  </div>

  <script>
    const API_BASE = 'http://localhost:3000';
    let allQueries = [];

    // Load all queries
    async function loadQueries() {
      try {
        const response = await fetch(`${API_BASE}/get`);
        const data = await response.json();

        if (data.success && data.queries && data.queries.length > 0) {
          allQueries = data.queries;
          displayQueries(allQueries);
        } else {
          showEmptyState();
        }
      } catch (error) {
        console.error('Error loading queries:', error);
        showError();
      }
    }

    // Display queries
    function displayQueries(queries) {
      document.getElementById('loadingState').style.display = 'none';
      document.getElementById('emptyState').style.display = 'none';
      document.getElementById('noResults').style.display = 'none';
      document.getElementById('queryGrid').style.display = 'grid';

      const grid = document.getElementById('queryGrid');
      const statsBar = document.getElementById('statsBar');

      statsBar.textContent = `üìä ${queries.length} Saved ${queries.length === 1 ? 'Query' : 'Queries'}`;
      grid.innerHTML = '';

      // Sort by date (newest first)
      queries.sort((a, b) => new Date(b.pinnedAt || 0) - new Date(a.pinnedAt || 0));

      queries.forEach(query => {
        const card = createQueryCard(query);
        grid.appendChild(card);
      });
    }

    // Create query card
    function createQueryCard(query) {
      const card = document.createElement('div');
      card.className = 'query-card';
      card.id = `card-${query.id}`;

      const date = query.pinnedAt ? new Date(query.pinnedAt).toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      }) : 'Unknown';

      const time = query.pinnedAt ? new Date(query.pinnedAt).toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit'
      }) : '';

      card.innerHTML = `
        <div class="query-header">
          <span class="query-icon">üîç</span>
          <div class="query-title">${escapeHtml(query.query)}</div>
        </div>
        
        <div class="query-meta">
          <span class="meta-item">üìÖ ${date}</span>
          <span class="meta-item">üïê ${time}</span>
          <span class="meta-item">üìù ${query.answer.length} chars</span>
        </div>
        
        <div class="answer-content">${escapeHtml(query.answer)}</div>
        
        <div class="card-actions">
          <button class="action-btn copy-btn" onclick="copyAnswer('${query.id}', this)">
            üìã Copy Answer
          </button>
          <button class="action-btn delete-btn" onclick="deleteQuery('${query.id}')">
            üóëÔ∏è Delete
          </button>
        </div>
      `;

      return card;
    }

    // Copy answer
    function copyAnswer(id, button) {
      const query = allQueries.find(q => q.id === id);
      if (!query) return;

      navigator.clipboard.writeText(query.answer).then(() => {
        button.textContent = '‚úÖ Copied!';
        button.style.background = '#4CAF50';
        button.style.color = 'white';

        setTimeout(() => {
          button.textContent = 'üìã Copy Answer';
          button.style.background = '';
          button.style.color = '';
        }, 1500);
      });
    }

    // Delete query
    async function deleteQuery(id) {
      const query = allQueries.find(q => q.id === id);
      if (!query) return;

      if (!confirm(`Delete this query?\n\n"${query.query}"`)) return;

      try {
        const response = await fetch(`${API_BASE}/delete`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id })
        });

        const data = await response.json();

        if (data.success) {
          const card = document.getElementById(`card-${id}`);
          card.style.transition = 'all 0.3s';
          card.style.opacity = '0';
          card.style.transform = 'scale(0.9)';

          setTimeout(() => {
            card.remove();
            allQueries = allQueries.filter(q => q.id !== id);

            if (allQueries.length === 0) {
              showEmptyState();
            } else {
              document.getElementById('statsBar').textContent = 
                `üìä ${allQueries.length} Saved ${allQueries.length === 1 ? 'Query' : 'Queries'}`;
            }
          }, 300);
        }
      } catch (error) {
        alert('Failed to delete query');
      }
    }

    // Search functionality
    document.getElementById('searchInput').addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase().trim();

      if (!searchTerm) {
        displayQueries(allQueries);
        return;
      }

      const filtered = allQueries.filter(q => 
        q.query.toLowerCase().includes(searchTerm) || 
        q.answer.toLowerCase().includes(searchTerm)
      );

      if (filtered.length > 0) {
        displayQueries(filtered);
      } else {
        document.getElementById('queryGrid').style.display = 'none';
        document.getElementById('noResults').style.display = 'block';
      }
    });

    // Show empty state
    function showEmptyState() {
      document.getElementById('loadingState').style.display = 'none';
      document.getElementById('queryGrid').style.display = 'none';
      document.getElementById('emptyState').style.display = 'block';
      document.getElementById('statsBar').textContent = 'üìä 0 Saved Queries';
    }

    // Show error
    function showError() {
      document.getElementById('loadingState').innerHTML = `
        <div class="icon" style="font-size: 64px; margin-bottom: 20px;">‚ö†Ô∏è</div>
        <h3>Connection Error</h3>
        <p>Could not connect to MemoLearn server. Make sure it's running.</p>
      `;
    }

    // Escape HTML
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Initialize
    loadQueries();
  </script>
</body>
</html>